library(RCurl)
library(RCurl)
install.packages("RCurl")
setInternet2(use = TRUE)
setInternet2(use = F)
setInternet2(use = F)
remove(list = ls())
library(caret)
library(randomForest)
library(corrplot)
library(kernlab)
library(RCurl)
setInternet2(use = F)
# set URLs and destinations
Url1 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
Url2 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file1 <- "./data/pml-training.csv"
file2 <- "./data/pml-testing.csv"
# download the files
download.file(Url1, destfile = file1)
download.file(Url2, destfile = file2)
# read the trainings file
data_training <- read.csv("./data/pml-training.csv", na.strings= c("NA",""," "))
# usable the data by removing columns with NAs etc
data_training_NAs <- apply(data_training, 2, function(x) sum(is.na(x)))
data_training_usable <- data_training[,which(data_training_NAs == 0)]
# remove not needed columns
data_training_usable <- data_training_usable[8:length(data_training_usable)]
# split the data to trainings and validation sets 75/25
inTrain <- createDataPartition(y = data_training_usable$classe, p = 0.1, list = FALSE)
training <- data_training_usable[inTrain, ]
validation <- data_training_usable[-inTrain, ]
# plot a correlation matrix
correlMatrix <- cor(training[, -length(training)])
corrplot(correlMatrix, order = "FPC", method = "color", type = "lower", tl.cex = 0.8,  tl.col = rgb(0, 0, 0))
model.rm     <- randomForest(classe ~ ., data = training)
model.rm
inTrain <- createDataPartition(y = data_training_usable$classe, p = 0.75, list = FALSE)
training <- data_training_usable[inTrain, ]
validation <- data_training_usable[-inTrain, ]
# plot a correlation matrix
correlMatrix <- cor(training[, -length(training)])
corrplot(correlMatrix, order = "FPC", method = "color", type = "lower", tl.cex = 0.7,  tl.col = rgb(0, 0, 0))
# fit a model to predict the classe using every other variable as a predictor
#Random forest method
model.rm     <- randomForest(classe ~ ., data = training)
model.rm
summary(model.rm)
confusion(model.rm)
model.rm$confusion
model.rm
ls(model.rm)
model.rm$confusion
model.rm$test
model.rm$type
model.rm$oob.times
ls(model.rm)
model.rm$importance
